trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  ConnectedServiceName: 'Azure subscription 1 (5341073c-194f-47d6-9c70-69c9a32cbcdf)'
  ResourceGroupName: 'Bookshop'
  
  frontPath: './BookshopAngular'
  backPath: './BookshopApi'
  buildOutput: '$(Build.ArtifactStagingDirectory)'
  
  WebAppKind: 'webApp'
  DevWebAppName: 'BookshopWebAppQA'
  ProdWebAppName: 'BookshopWebAppPROD'
 

stages:
- stage: BuildAndTest
  displayName: "Build and Test API and Front"
  jobs:
  # BOOKSHOPAPI: RUN UNIT TESTS AND BUILD
  - job: BuildDotnet
    displayName: "Build and Test API"
    pool:
      vmImage: 'windows-latest'
    steps:
    - checkout: self
      fetchDepth: 0

    - task: DotNetCoreCLI@2
      displayName: 'Restaurar paquetes NuGet'
      inputs:
        command: restore
        projects: '$(solution)'
    
    # BOOKSHOPAPI: RUN UNIT TESTS
    - task: DotNetCoreCLI@2
      displayName: 'Ejecutar pruebas de la API'
      inputs:
        command: 'test'
        projects: '**/*.Tests.csproj'
        arguments: '--collect:"XPlat Code Coverage"'
        continueOnError: false

    - task: PublishCodeCoverageResults@2
      displayName: 'Publicar resultados de code coverage del back-end'
      inputs:
        summaryFileLocation: '$(Agent.TempDirectory)/**/*.cobertura.xml'
        failIfCoverageEmpty: false
      
    - task: DotNetCoreCLI@2
      # BOOKSHOPAPI: BUILD
      displayName: 'Build BookshopApi'
      inputs:
        command: build
        projects: 'BookshopApi/BookshopApi/BookshopApi.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(buildOutput)/api  --self-contained false'

    - task: DotNetCoreCLI@2
      displayName: 'Publish BookshopApi'
      inputs:
        command: publish
        publishWebProjects: True
        arguments: '--configuration $(buildConfiguration) --output $(buildOutput)'
        #dotnet publish $(solution) --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory) --no-build
        zipAfterPublish: False

    - task: PublishBuildArtifacts@1
      displayName: 'Publish build artifacts'
      inputs:
        PathtoPublish: '$(buildOutput)'
        ArtifactName: 'drop-back'
        #publishLocation: 'Container'

  # BOOKSHOPANGULAR: RUN UNIT TESTS AND BUILD
  - job: BuildAngular
    displayName: "Build and Test Angular"
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    - fetchDepth: 0
    - task: NodeTool@0
      displayName: 'Instalar Node.js'
      inputs:
        versionSpec: '22.x'
    
    - task: CmdLine@2
      displayName: 'Instalar dependencias'
      inputs:
        script: npm install
        workingDirectory: $(frontPath)

    # BOOKSHOPAPI: RUN UNIT TESTS
    - script: npx ng test --karma-config=karma.conf.js --watch=false --browsers ChromeHeadless --code-coverage
      displayName: 'Ejecutar pruebas del front'
      workingDirectory: $(frontPath)
      continueOnError: false

    - task: PublishCodeCoverageResults@2
      displayName: 'Publicar resultados de code coverage del front'
      inputs:
        summaryFileLocation: '$(frontPath)/coverage/lcov.info'
        failIfCoverageEmpty: false
      condition: always()

    - task: PublishTestResults@2
      displayName: 'Publicar resultados de pruebas unitarias del front'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(frontPath)/test-results/test-results.xml'
        failTaskOnFailedTests: true
      condition: always()
      
    # BOOKSHOPANGULAR: BUILD
    - task: CmdLine@2
      displayName: 'Build Bookshop Frontend'
      condition: succeeded()
      inputs:
        script: npx ng build --configuration production
        workingDirectory: $(frontPath)

    - task: PublishBuildArtifacts@1
      displayName: 'Publicar artefactos Angular'
      inputs:
        PathtoPublish: '$(frontPath)/dist/employee-crud-angular/browser' # controlar url
        ArtifactName: 'drop-front'
        #publishLocation: 'Container'

# DEPLOY BACK AND FRONT TO QA + INTEGRATION TESTS
- stage: DeployToQA
  displayName: 'Deploy to QA'
  dependsOn: BuildAndTest
  condition: succeeded()
  
  jobs:
  - job: DeployBackToQA
    displayName: 'Deploy Backend to QA'
    steps:
      - task: DownloadPipelineArtifact@2
        displayName: 'Download Build Artifacts'
        inputs:
          buildType: 'current'
          artifactName: 'drop-back'
          targetPath: '$(Pipeline.Workspace)/drop-back'

      - script: ls -l "$(Pipeline.Workspace)/drop-back"
        displayName: 'List Pipeline Workspace Content (QA)'

      - task: AzureRmWebAppDeployment@4
        displayName: 'Deploy to Azure App Service (QA)'
        inputs:
          azureSubscription: '$(ConnectedServiceName)'
          appType: 'webApp'
          WebAppName: '$(DevWebAppName)'
          package: '$(Pipeline.Workspace)/drop-back'

  - job: DeployFrontToQA
    displayName: 'Deploy Frontend to QA'
    steps:
      - task: DownloadPipelineArtifact@2
        displayName: 'Download Build Artifacts'
        inputs:
          buildType: 'current'
          artifactName: 'drop-front'
          targetPath: '$(Pipeline.Workspace)/drop-front'

      - script: ls -l "$(Pipeline.Workspace)/drop-front"
        displayName: 'List Pipeline Workspace Content (QA)'

      - task: AzureRmWebAppDeployment@4
        displayName: 'Deploy to Azure App Service (QA)'
        inputs:
          azureSubscription: '$(ConnectedServiceName)'
          appType: 'webApp'
          WebAppName: '$(DevWebAppName)'
          package: '$(Pipeline.Workspace)/drop-front'

# INTEGRATION TESTS CYPRESS PENDING!!!!

# DEPLOY TO PROD
- stage: DeployToProd
  displayName: 'Deploy to Production'
  dependsOn: DeployToQA #pedir aprobacion manual
  condition: succeeded()
  jobs:
    -job:
      - deployment: DeployBackToProd
        displayName: 'Deploy Backend to Production'
        environment: 'Production'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadPipelineArtifact@2
                  displayName: 'Download Build Artifacts'
                  inputs:
                    buildType: 'current'
                    artifactName: 'drop-back'
                    targetPath: '$(Pipeline.Workspace)/drop-back'

                - script: ls -l "$(Pipeline.Workspace)/drop-back"
                  displayName: 'List Pipeline Workspace Content (Production)'

                - task: AzureRmWebAppDeployment@4
                  displayName: 'Deploy to Azure App Service (Production)'
                  inputs:
                    azureSubscription: '$(ConnectedServiceName)'
                    appType: 'webApp'
                    WebAppName: '$(ProdWebAppName)'
                    package: '$(Pipeline.Workspace)/drop-back'
    -job:
      - deployment: DeployFrontToProd
        displayName: 'Deploy Frontend to Production'
        environment: 'Production'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadPipelineArtifact@2
                  displayName: 'Download Build Artifacts'
                  inputs:
                    buildType: 'current'
                    artifactName: 'drop-front'
                    targetPath: '$(Pipeline.Workspace)/drop-front'

                - script: ls -l "$(Pipeline.Workspace)/drop-front"
                  displayName: 'List Pipeline Workspace Content (Production)'

                - task: AzureRmWebAppDeployment@4
                  displayName: 'Deploy to Azure App Service (Production)'
                  inputs:
                    azureSubscription: '$(ConnectedServiceName)'
                    appType: 'webApp'
                    WebAppName: '$(ProdWebAppName)'
                    package: '$(Pipeline.Workspace)/drop-front'