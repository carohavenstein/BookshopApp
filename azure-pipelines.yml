
# antes de build de back - tests y resultados de code coverage
 - task: DotNetCoreCLI@2
   displayName: 'Ejecutar pruebas de la API'
   inputs:
     command: 'test'
     projects: '**/*.Tests.csproj'  # Asegúrate de que el patrón apunte a tu proyecto de pruebas
     arguments: '--collect:"XPlat Code Coverage"'

 - task: PublishCodeCoverageResults@2
   inputs:
     summaryFileLocation: '$(Agent.TempDirectory)/**/*.cobertura.xml'
     failIfCoverageEmpty: false
   displayName: 'Publicar resultados de code coverage del back-end'
# antes de build de back - tests y resultados de code coverage



# antes de build de font - tests front y publicacion de resultados
 - script: npx ng test --karma-config=karma.conf.js --watch=false --browsers ChromeHeadless --code-coverage
   displayName: 'Ejecutar pruebas del front'
   workingDirectory: $(projectPath)
   continueOnError: true  # Para que el pipeline continúe aunque falle
 
 - task: PublishCodeCoverageResults@2
   inputs:
     summaryFileLocation: '$(projectPath)/coverage/lcov.info'
     failIfCoverageEmpty: false
   condition: always()  # Esto asegura que se ejecute siempre
   displayName: 'Publicar resultados de code coverage del front'  
 
 - task: PublishTestResults@2
   inputs:
     testResultsFormat: 'JUnit'
     testResultsFiles: '$(projectPath)/test-results/test-results.xml'
     failTaskOnFailedTests: true
   condition: always()  # Esto asegura que se ejecute siempre
   displayName: 'Publicar resultados de pruebas unitarias del front'
# antes de build de font - tests front y publicacion de resultados